import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class LoginPage {

    private static Map<String, String> userDatabase = new HashMap<>();

    public static void main(String[] args) {
        // Initialize user database (in a real application, this would be stored securely)
        userDatabase.put("user1", "password1");
        userDatabase.put("user2", "password2");

        // Create Scanner for user input
        Scanner scanner = new Scanner(System.in);

        // Prompt for username and password
        System.out.println("Welcome to the Login Page");
        System.out.print("Enter username: ");
        String username = scanner.nextLine();

        System.out.print("Enter password: ");
        String password = scanner.nextLine();

        // Check credentials
        if (authenticateUser(username, password)) {
            System.out.println("Login successful. Welcome, " + username + "!");
            // If login is successful, proceed to the listing page
            ListingPage.showListingPage();
        } else {
            System.out.println("Login failed. Invalid username or password.");
        }

        // Close the scanner
        scanner.close();
    }

    private static boolean authenticateUser(String username, String password) {
        // Check if the username exists and the password matches
        return userDatabase.containsKey(username) && userDatabase.get(username).equals(password);
    }
}

class ListingPage {
    static void showListingPage() {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Listing Page");
            System.out.println("1. Add Item");
            System.out.println("2. List Items");
            System.out.println("3. Proceed to Payment");
            System.out.println("4. Logout");
            System.out.print("Choose an option: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // consume the newline character

            switch (choice) {
                case 1:
                    addItem(scanner);
                    break;
                case 2:
                    listItems();
                    break;
                case 3:
                    PaymentPage.processPayment();
                    break;
                case 4:
                    System.out.println("Logging out. Goodbye!");
                    scanner.close();
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please choose again.");
            }
        }
    }

    private static void addItem(Scanner scanner) {
        System.out.print("Enter the item name: ");
        String item = scanner.nextLine();
        System.out.println("Item added: " + item);
    }

    private static void listItems() {
        System.out.println("Items in the list: [item1, item2, item3]");
    }
}

class PaymentPage {
    static void processPayment() {
        Scanner scanner = new Scanner(System.in);

        // Simulate a payment process
        System.out.println("Payment Page");
        System.out.print("Enter credit card number: ");
        String creditCardNumber = scanner.nextLine();

        System.out.print("Enter expiration date (MM/YYYY): ");
        String expirationDate = scanner.nextLine();

        System.out.print("Enter CVV: ");
        String cvv = scanner.nextLine();

        // Simulate payment processing (in a real application, use secure payment gateways)
        boolean paymentSuccessful = validatePaymentDetails(creditCardNumber, expirationDate, cvv);

        // Display the result of the payment
        if (paymentSuccessful) {
            System.out.println("Payment successful. Thank you for your purchase!");
        } else {
            System.out.println("Payment failed. Please check your payment details and try again.");
        }

        // Close the scanner
        scanner.close();
    }

    private static boolean validatePaymentDetails(String creditCardNumber, String expirationDate, String cvv) {
        // Simulate a simple payment validation logic
        // In a real application, you would integrate with a secure payment gateway
        return creditCardNumber.length() == 16 && expirationDate.matches("\\d{2}/\\d{4}") && cvv.length() == 3;
    }
}
